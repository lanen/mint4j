<?xml version="1.0" encoding="UTF-8"?>

<b:beans xmlns:b="http://www.springframework.org/schema/beans"
    xmlns="http://www.springframework.org/schema/security"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:util="http://www.springframework.org/schema/util"
   	xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:mvc="http://www.springframework.org/schema/mvc" 
    xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">
	
   
    <!--  URL 模式的访问权限 access 表示访问权限 -->
    
    <http entry-point-ref="casEntryPoint" use-expressions="true">
        <intercept-url pattern="/" access="permitAll"/>
        <intercept-url pattern="/index.jsp" access="permitAll"/>
        <intercept-url pattern="/cas-logout.jsp" access="permitAll"/>
        <intercept-url pattern="/casfailed.jsp" access="permitAll"/>
        <intercept-url pattern="/secure/extreme/**"
            access="hasRole('ROLE_SUPERVISOR')" />
        <intercept-url pattern="/secure/**" access="hasRole('ROLE_USER')" />
        <intercept-url pattern="/**" access="hasRole('ROLE_USER')" />
        
        
        <custom-filter ref="requestSingleLogoutFilter" before="LOGOUT_FILTER"/>
        <custom-filter ref="singleLogoutFilter" before="CAS_FILTER"/>
        <custom-filter ref="casFilter" position="CAS_FILTER" />
        
        <!-- 默认的注销地址 /j_spring_security_logout，可以通过属性 logout-url 来修改 -->
        <logout logout-success-url="/cas-logout.jsp"/>
    </http>

    <authentication-manager alias="authManager">
        <authentication-provider ref="casAuthProvider" />
    </authentication-manager>

    <!-- This filter handles a Single Logout Request from the CAS Server -->
    <b:bean id="singleLogoutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter"/>
    <!-- This filter redirects to the CAS Server to signal Single Logout should be performed -->
    <b:bean id="requestSingleLogoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter"
        p:filterProcessesUrl="/j_spring_cas_security_logout">
        <b:constructor-arg value="${cas.server.hostUrl}/cas/logout"/>
        <b:constructor-arg>
            <b:bean id="securityContextLogoutHandler" class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
        </b:constructor-arg>
    </b:bean>

    <b:bean id="serviceProperties"
        class="org.springframework.security.cas.ServiceProperties"
        p:service="${cas.service.hostUrl}/j_spring_cas_security_check"
        p:authenticateAllArtifacts="true"/>
        
     <!-- 游戏分区的用户入口 -->
    <user-service id="userService">
        <user name="test" password="test" authorities="ROLE_SUPERVISOR,ROLE_USER" />
        <user name="dianne" password="dianne" authorities="ROLE_USER" />
        <user name="scott" password="scott" authorities="ROLE_USER" />
    </user-service>
    
    
    <!-- CAS 入口 -->
    <b:bean id="casEntryPoint"
        class="org.springframework.security.cas.web.CasAuthenticationEntryPoint"
        p:serviceProperties-ref="serviceProperties" p:loginUrl="${cas.server.hostUrl}/login" />
        
    <!-- CAS client 过滤器 -->
    <b:bean id="casFilter"
        class="org.springframework.security.cas.web.CasAuthenticationFilter"
        p:authenticationManager-ref="authManager"
        p:serviceProperties-ref="serviceProperties"
        p:proxyGrantingTicketStorage-ref="pgtStorage"
        p:proxyReceptorUrl="/j_spring_cas_security_proxyreceptor">
        <!-- CAS 返回验证成功的Handler，在里面 -->
        <b:property name="authenticationDetailsSource">
            <b:bean id="serviceAuthenticationDetailsSource" class="org.springframework.security.cas.web.authentication.ServiceAuthenticationDetailsSource"/>
        </b:property>
        <!-- 验证失败的Handler -->
        <b:property name="authenticationFailureHandler">
            <b:bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"
                p:defaultFailureUrl="/casfailed.jsp"/>
        </b:property>
    </b:bean>
   
    <!--
        NOTE: In a real application you should not use an in memory implementation. You will also want
              to ensure to clean up expired tickets by calling ProxyGrantingTicketStorage.cleanup()
     -->
    <b:bean id="pgtStorage" class="org.jasig.cas.client.proxy.ProxyGrantingTicketStorageImpl"/>
    
    
    <b:bean id="casAuthProvider" class="org.springframework.security.cas.authentication.CasAuthenticationProvider"
        p:serviceProperties-ref="serviceProperties"
        p:key="casAuthProviderKey">
        <b:property name="authenticationUserDetailsService">
            <b:bean
                class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
                <b:constructor-arg ref="userService" />
            </b:bean>
        </b:property>
        <b:property name="ticketValidator">
        	<!-- 启用了代理 Cas20ProxyTicketValidator -->
            <b:bean
                class="org.jasig.cas.client.validation.Cas20ProxyTicketValidator"
                p:acceptAnyProxy="true"
                p:proxyCallbackUrl="${cas.service.hostUrl}/j_spring_cas_security_proxyreceptor"
                p:proxyGrantingTicketStorage-ref="pgtStorage">
                <b:constructor-arg value="${cas.server.hostUrl}" />
            </b:bean>
        </b:property>
        <b:property name="statelessTicketCache">
            <b:bean class="org.springframework.security.cas.authentication.EhCacheBasedTicketCache">
                <b:property name="cache">
                    <b:bean class="net.sf.ehcache.Cache"
                      init-method="initialise"
                      destroy-method="dispose">
                        <b:constructor-arg value="casTickets"/>
                        <b:constructor-arg value="50"/>
                        <b:constructor-arg value="true"/>
                        <b:constructor-arg value="false"/>
                        <b:constructor-arg value="3600"/>
                        <b:constructor-arg value="900"/>
                    </b:bean>
                </b:property>
            </b:bean>
        </b:property>
    </b:bean>

    <!-- Configuration for the environment can be overriden by system properties -->
    <!-- 
    <context:property-placeholder system-properties-mode="OVERRIDE" properties-ref="environment"/>
    <util:properties id="environment">
        <b:prop key="cas.service.host">localhost:8443</b:prop>
        <b:prop key="cas.server.host">localhost:9443</b:prop>
    </util:properties>
     -->
     
     <!-- 以下定义游戏分区的数据源，hibernate JPA -->
     
    <b:bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<b:property name="persistenceXmlLocation" value="classpath:META-INF/persistence.xml" />
	</b:bean>
	
	<b:bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
	<b:bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
	
	<b:bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
	    <b:property name="entityManagerFactory" ref="entityManagerFactory" />
	</b:bean>
	<tx:annotation-driven />
     
</b:beans>
